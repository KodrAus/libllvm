jobs:

# Fetch llvm source
# We do this once so all subsequent steps
# have a consistent source to work off
- job: Setup
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  # Get the commit hash we intend to build
  - powershell: ci/llvm-src.ps1

  # Publish the hash as an artifact
  - script: mkdir llvm-src-tmp
  - script: mv llvm-commit llvm-src-tmp
  - script: mv llvm-version llvm-src-tmp
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'llvm-src'
      targetPath: 'llvm-src-tmp'

# linux-x64 build of LLVM
- job: Linux
  timeoutInMinutes: 360
  pool:
    vmImage: 'ubuntu-16.04'
  dependsOn:
  - Setup
  steps:
  # Fetch the temp artifacts for the build
  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'llvm-src'
      targetPath: $(System.DefaultWorkingDirectory)/llvm-src-tmp
  - script: mv llvm-src-tmp/* .
  - script: rm -r llvm-src-tmp

  # Build libLLVM.so
  - powershell: ci/llvm-linux-x64/build.ps1

  # Add the Linux build artifacts
  - script: mkdir llvm-linux-x64-tmp
  - script: cp llvm-linux-x64/libLLVM.so llvm-linux-x64-tmp
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'llvm-linux-x64'
      targetPath: 'llvm-linux-x64-tmp'

# osx-x64 build of LLVM
- job: macOS
  timeoutInMinutes: 360
  pool:
    vmImage: 'macOS-10.13'
  dependsOn:
  - Setup
  steps:
  # Fetch the temp artifacts for the build
  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'llvm-src'
      targetPath: $(System.DefaultWorkingDirectory)/llvm-src-tmp
  - script: mv llvm-src-tmp/* .
  - script: rm -r llvm-src-tmp

  # Build libLLVM.dylib
  - powershell: ci/llvm-osx-x64/build.ps1

  # Add the OSX build artifacts
  - script: mkdir llvm-osx-x64-tmp
  - script: cp llvm-osx-x64/libLLVM.dylib llvm-osx-x64-tmp
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'llvm-osx-x64'
      targetPath: 'llvm-osx-x64-tmp'

# win81-x64 build of LLVM
- job: Windows
  timeoutInMinutes: 360
  pool:
    vmImage: 'vs2017-win2016'
  dependsOn:
  - Setup
  steps:
  # Environment setup
  - script: choco install visualstudio2017buildtools --package-parameters "--add Microsoft.VisualStudio.Workload.VCTools --includeRecommended"
  # Fetch the temp artifacts for the build
  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'llvm-src'
      targetPath: $(System.DefaultWorkingDirectory)/llvm-src-tmp
  - script: mv llvm-src-tmp/* .
  - script: rm -r llvm-src-tmp

  # Build LLVM.dll
  - powershell: ci/llvm-win81-x64/build.ps1

  # Add the Windows build artifacts
  - script: mkdir llvm-win81-x64-tmp
  - script: cp llvm-win81-x64/LLVM.dll llvm-win81-x64-tmp
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'llvm-win81-x64'
      targetPath: 'llvm-win81-x64-tmp'

# Package the artifacts into a single nupkg
- job: Package
  pool:
    vmImage: 'vs2017-win2016'
  dependsOn:
  - Linux
  - macOS
  - Windows
  steps:
  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'llvm-src'
      targetPath: $(System.DefaultWorkingDirectory)/llvm-src-tmp
  - script: mv llvm-src-tmp/* .
  - script: rm -r llvm-src-tmp

  # Get native libraries from previous steps
  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'llvm-linux-x64'
      targetPath: $(System.DefaultWorkingDirectory)/llvm-linux-x64
  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'llvm-osx-x64'
      targetPath: $(System.DefaultWorkingDirectory)/llvm-osx-x64
  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'llvm-win81-x64'
      targetPath: $(System.DefaultWorkingDirectory)/llvm-win81-x64

  # Package a nupkg
  - powershell: ci/llvm-pkg.ps1

  # Publish the nupkg as an artifact
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'llvm-pkg'
      targetPath: 'llvm-pkg'